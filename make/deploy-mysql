#!/bin/bash
set -o nounset -o errexit

# This script is derived from
#	cf-ci:qa-pipelines/tasks/usb-deploy.sh

# # ## ### ##### ######## ############# #####################
## configuration

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
source "${GIT_ROOT}/make/include/defaults"

USB_PLUGIN_LOCATION="https://github.com/SUSE/cf-usb-plugin/releases/download/1.0.0/cf-usb-plugin-1.0.0.0.g47b49cd-linux-amd64"

SUSE_REPO="https://kubernetes-charts.suse.com"
MYSQL_CHART="suse/cf-usb-sidecar-mysql"

# For vagrant the external IP is a fixed value.
# dig cf-dev.io (We need IP for the ASG later)
DB_EXTERNAL_IP=192.168.77.77

NFS_SCLASS="nfspersist"

PASS="$(kubectl --namespace "${CF_NAMESPACE}" get secrets secrets -o jsonpath='{.data.cluster-admin-password}' | base64 -d)"

# # ## ### ##### ######## ############# #####################
## Preparations
# - Need a persistent NFS storage class (mysql backend data storage)
# - Need the cf usb plugin (usb inspection)
# - Need the SUSE helm repository (mysql sidecar chart)
# - Need an app security group so that apps using the new service can talk with its instances.

cf api --skip-ssl-validation "https://api.${DOMAIN}"
cf auth admin "${PASS}"

$(dirname $0)/nfs-storageclass
$(dirname $0)/usb-plugin
$(dirname $0)/helm-suse-repository
$(dirname $0)/asg                  k8s-mysql-sidecar-net "${DB_EXTERNAL_IP}/32" "5432,30306"

if ! helm search  "${MYSQL_CHART}" ; then
    prtinf "%sThe required sidecar chart ${MYSQL_CHART} is missing%s" "\033\[0;31;1m" "\033\[0m"
    # Should have been in the suse repository, see above.
    exit 1
fi

# # ## ### ##### ######## ############# #####################

get_internal_ca_cert() {
  local generated_secrets_secret=$(kubectl get --namespace ${1} deploy -o json | jq -r '[.items[].spec.template.spec.containers[].env[] | select(.name == "INTERNAL_CA_CERT").valueFrom.secretKeyRef.name] | unique[]')
  if [[ $(echo $generated_secrets_secret | wc -w) -ne 1 ]]; then
    echo "Internal cert or secret problem in ${1} namespace"
    return 1
  fi
  kubectl get secret ${generated_secrets_secret} \
    --namespace "${1}" \
    -o jsonpath="{.data['internal-ca-cert']}" \
    | base64 -d
}

UAA_CERT=$(get_internal_ca_cert "${UAA_NAMESPACE}")
CF_CERT=$(get_internal_ca_cert "${CF_NAMESPACE}")

# # ## ### ##### ######## ############# #####################
## mysql database

helm install stable/mysql                   \
  --name mysql                              \
  --namespace mysql                         \
  --set imageTag=5.7.22                     \
  --set mysqlRootPassword=password          \
  --set persistence.storageClass="${NFS_SCLASS}" \
  --set persistence.size=4Gi                \
  --set service.type=NodePort               \
  --set service.nodePort=30306              \
  --set service.port=3306

$(dirname $0)/wait mysql

# # ## ### ##### ######## ############# #####################
## mysql usb sidecar

COMMON_SIDECAR_PARAMS=(
  --set "env.CF_ADMIN_USER=admin"
  --set "env.CF_ADMIN_PASSWORD=${PASS}"
  --set "env.CF_DOMAIN=${DOMAIN}"
  --set "env.CF_CA_CERT=${CF_CERT}"
  --set "env.UAA_CA_CERT=${UAA_CERT}"
  --set "kube.registry.hostname=registry.suse.com"
  --set "kube.organization=cap"
)

MYSQL_SIDECAR_PARAMS=(
  --set "env.SERVICE_TYPE=mysql"
  --set "env.SERVICE_LOCATION=http://cf-usb-sidecar-mysql.mysql-sidecar:8081"
  --set "env.SERVICE_MYSQL_HOST=${DB_EXTERNAL_IP}"
  --set "env.SERVICE_MYSQL_PORT=30306"
  --set "env.SERVICE_MYSQL_USER=root"
  --set "env.SERVICE_MYSQL_PASS=password"
)

helm install "${MYSQL_CHART}"  \
  --name mysql-sidecar         \
  --namespace mysql-sidecar    \
  "${MYSQL_SIDECAR_PARAMS[@]}" \
  "${COMMON_SIDECAR_PARAMS[@]}"

$(dirname $0)/wait mysql-sidecar

# Note: While the driver endpoint should be registered when the
# sidecar namespace is fully up (indicating that the setup task has
# completed) it may still take some time before this has passed
# through all the pieces of CF to become fully known. So, wait a bit
# more.
while ! cf usb-driver-endpoints | grep mysql ; do
    echo "Waiting for driver setup ..."
    sleep 10
done

# # ## ### ##### ######## ############# #####################
## Quick test that the new mysql service is ok.

$(dirname $0)/test-service mysql

exit
